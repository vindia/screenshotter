{
  "name": "url-to-screenshot",
  "description": "Capture screenshots using phantomjs",
  "version": "0.4.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/juliangruber/url-to-screenshot.git"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "homepage": "https://github.com/juliangruber/url-to-screenshot",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "keywords": [
    "phantomjs",
    "screenshot",
    "headless"
  ],
  "author": {
    "name": "Julian Gruber",
    "email": "mail@juliangruber.com",
    "url": "http://juliangruber.com"
  },
  "license": "MIT",
  "readme": "\n# url-to-screenshot\n\nCapture screenshots using [phantomjs](http://phantomjs.org/).\n\n[![build status](https://secure.travis-ci.org/juliangruber/url-to-screenshot.png)](http://travis-ci.org/juliangruber/url-to-screenshot)\n\n## Example\n\nCapture a `800x600` screenshot of [google](https://google.com):\n\n```js\nvar screenshot = require('url-to-screenshot');\nvar fs = require('fs');\n\nscreenshot('http://google.com/')\n  .width(800)\n  .height(600)\n  .capture(function(err, img) {\n    if (err) throw err;\n    fs.writeFileSync(__dirname + '/example.png', img);\n    console.log('open example.png');\n  });\n```\n\n![ghub.io](https://raw.github.com/juliangruber/url-to-screenshot/master/example.png)\n\n## API\n\n### Screenshot(url[, opts])\n\nCreate a screenshot object for `url`.\n\nUse `opts` if passing arguments this way is more convenient than using the api,\ne.g.:\n\n```js\nvar s = Screenshot('http://google.com', { width: 800 })\n// is the same as\nvar s = Screenshot('http://google.com').width(800);\n```\n\n### Screenshot#width(width)\n\nSet the screenshot's width in pixel. Defaults to `1024`.\n\n### Screenshot#height(height)\n\nSet the screenshot's height in pixel. Defaults to `768`.\n\n### Screenshot#format(format)\n\nSet the output format. Supported formats:\n\n* `jpg`, `jpeg`\n* `png`\n* `gif`\n\nDefaults to `png`.\n\n### Screenshot#timeout(timeout)\n\nAfter loading the page, make phantomjs wait for `timeout` milliseconds before \ntaking the screenshot. Defaults to `0` ms.\n\n### Screenshot#capture([fn])\n\nCapture the screenshot and call `fn` with the possible error and a `Buffer`\ncontaining the image.\n\nIf no `fn` is provided, a thunk/continuable is returned.\n\nIf the page has a transparent background, it will be set to `white` before\ncapturing.\n\n## Installation\n\nMake sure you have a working installation of \n[phantomjs](http://phantomjs.org/) in your `$PATH`.\n\nWith [npm](https://npmjs.org) do:\n\n```bash\nnpm install url-to-screenshot\n```\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/juliangruber/url-to-screenshot/issues"
  },
  "_id": "url-to-screenshot@0.4.1",
  "_from": "url-to-screenshot@"
}
